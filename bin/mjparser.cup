

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}


scan with {:
	Symbol s = this.getScanner().next_token(); /*Presrecemo Scanner*/
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, CONST, SEMI, COMMA, EQUAL, CLASS;
terminal ENUM, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, IF, ELSE, FOR, BREAK, CONTINUE;
terminal RETURN, READ, PRINT, INC, DEC, OR, AND, MINUS, NEW, EQUALS, DIFFERENT, MORE;
terminal MOREEQUAL, LESS, LESSEQUAL, PLUS, MULTIPLY, DIVIDE, MOD, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal String BOOL;
terminal Character CHAR;

nonterminal DeclList, MethodDeclList, Decl, MethVarDecl;
nonterminal ConstDecl, VarDecl, ClassDecl, EnumDecl;
nonterminal ConstList, ConstPart, Consts, EnumList, Enums;
nonterminal VarList, Var, ClassPart, MethodDecl, FormPars, FormParamList;
nonterminal Form, Type, Statement, StatementList, DesignatorStatement, DesignatorPart; 
nonterminal Expr, Designator, DesignatorList, Assignop, ActPars;
nonterminal ActParsList, CondTerm, CondTermList, CondFact, Addop, ExprList, Factor, Term;
nonterminal ConditionList, Condition, TermList, Relop, Mulop, Matched, Unmatched, Unmatched_For, Matched_For, For;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;

/* ---------------------------------------- Program ------------------------------------------------------------- */

Program::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

/* ---------------------------------------- Declarations ------------------------------------------------------------- */

DeclList::=(Declarations) DeclList Decl	| (NoDeclList) /* epsilon */;

Decl ::= (Declarations1) ConstDecl | (Declarations2) VarDecl | (Declarations3) ClassDecl | (Declarations4) EnumDecl ;


/* ---------------------------------------- Constants ------------------------------------------------------------- */
			
ConstDecl ::= (ConstantsDecl) CONST Type:constType ConstList SEMI;

ConstList ::= (ConstantsListComma) ConstList COMMA ConstPart | (ConstantsListNoComma) ConstPart;

ConstPart ::= (ConstantsPart) IDENT:constName EQUAL Consts:c;

Consts ::= (ConstNumber) NUMBER | (ConstChar) CHAR | (ConstBool) BOOL;


/* ---------------------------------------- Enums ------------------------------------------------------------- */

EnumDecl ::= (EnumDeclaration) ENUM IDENT:enumName LBRACE EnumList RBRACE;

EnumList ::= (EnumListComma) EnumList COMMA Enums | (EnumNoComma) Enums;

Enums ::= (EnumNoNum) IDENT:name | (EnumNum)IDENT:name EQUAL NUMBER;


/* ---------------------------------------- Variables ------------------------------------------------------------- */

VarDecl ::= (VarDeclaration) Type:varType VarList:varName SEMI;

VarList ::= (VarListComma) VarList COMMA Var:v | (VarListNoComma) Var ;

Var::= (VarNoBrackets) IDENT:varName | (VarBrackets) IDENT:varName LBRACKET RBRACKET;


/* ----------------------------------------- Class ------------------------------------------------------------------------ */

ClassDecl ::= (ClassDeclaration) CLASS IDENT:className LBRACE VarDecl ClassPart RBRACE;

ClassPart ::= (ClassPartMethod) LBRACE MethodDeclList RBRACE
			|
			;


/* ---------------------------------------Class methods ------------------------------------------------------------------- */

MethodDeclList ::=(MethodDeclarationList) MethodDeclList MethodDecl | (NoMethodDeclaration) /* epsilon */;

MethodDecl ::= (MethodDeclarationType) Type:classType IDENT:methodName LPAREN FormPars RPAREN MethVarDecl LBRACE StatementList RBRACE
			|
			(MethodDeclarationVoid) VOID IDENT:methodName LPAREN FormPars RPAREN MethVarDecl LBRACE StatementList RBRACE
			;
			
MethVarDecl ::= (MethodVarDecl) MethVarDecl VarDecl | (NoMethodVarDecl) /* epsilon */;


/* ---------------Function and method parameters -------------------------------------------------------------------------- */

FormPars ::= (FormParameters) FormParamList | (NoFormParsList) /* epsilon */;

FormParamList ::= (FormParametersList) FormParamList COMMA Form | (FormParametersListSingle) Form;

Form ::= (FormNoBrackets) Type IDENT:formName | (FormBrackets) Type IDENT:formName LBRACKET RBRACKET;

/* ---------------------------------------- Type ------------------------------------------------------------- */

Type ::= (Types) IDENT:typeName;

/* ---------------------------------------- Statements ------------------------------------------------------------- */

StatementList ::= (StatementLists) StatementList Statement | (NoStatements) /* epsilon */;

Statement ::= (StatementMatched) Matched | (StatementUnatched)Unmatched ;

Unmatched ::= (UnmatchedIfNoElse) IF LPAREN Condition RPAREN Statement
			|
			(UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched
			|
			(UnmatchedFor) Unmatched_For;

Matched ::= (MatchedDesignator) DesignatorStatement SEMI	
		|
		(MatchedDesignatorError) error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}	
		| 
		(MatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Matched
		| 
		(MatchedFor) Matched_For
		| 
		(MatchedBreak) BREAK SEMI
		| 
		(MatchedContinue) CONTINUE SEMI
		| 
		(MatchedReturnNoExpr) RETURN SEMI
		| 
		(MatchedReturnExpr) RETURN Expr SEMI
		| 
		(MatchedRead) READ LPAREN Designator RPAREN SEMI
		| 
		(MatchedPrint) PRINT LPAREN Expr RPAREN SEMI
		| 
		(MatchedPrintNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		|
		(MatchedStatement) LBRACE StatementList RBRACE
		;
		
Unmatched_For ::= (UnmatchedForSeparation) For Unmatched ;
Matched_For   ::= (MatchedForSeparation) For Matched ;

For ::= (ForEmpty) FOR LPAREN SEMI SEMI RPAREN
		|
		(For1) FOR LPAREN DesignatorStatement SEMI SEMI RPAREN
		|
		(For2) FOR LPAREN SEMI Condition SEMI RPAREN
		| 
		(For3) FOR LPAREN SEMI SEMI DesignatorStatement RPAREN
		| 
		(For12) FOR LPAREN DesignatorStatement SEMI Condition SEMI RPAREN
		| 
		(For13) FOR LPAREN DesignatorStatement SEMI SEMI DesignatorStatement RPAREN
		| 
		(For23) FOR LPAREN SEMI Condition SEMI DesignatorStatement RPAREN
		| 
		(For123) FOR LPAREN DesignatorStatement SEMI Condition SEMI DesignatorStatement RPAREN;

/* ---------------------------------------- DesignatorStatement ------------------------------------------------------- */		

DesignatorStatement ::= (DesigStatement) Designator DesignatorPart;

DesignatorPart ::=(DesignatorPart1) Assignop Expr 
				| 
				(DesignatorPart2) LPAREN RPAREN 
				| 
				(DesignatorPart3) INC 
				| 
				(DesignatorPart4) DEC
				|
				(DesignatorPart5) LPAREN ActPars RPAREN
				;
				
		
/* ---------------------------------------- ActualParameters ------------------------------------------------------- */

ActPars ::= (ActualParameters) ActParsList;

ActParsList ::= (ActParsListComma) ActParsList COMMA Expr | (ActParsListNoComma) Expr;

/* ---------------------------------------- Condition ------------------------------------------------------- */

Condition ::= (Conditions) ConditionList ;

ConditionList ::= (ConditionListOr) ConditionList OR CondTerm | (ConditionListNoOr) CondTerm;

/* ---------------------------------------- CondTerm ------------------------------------------------------- */

CondTerm ::= (ConditionTerm) CondTermList;

CondTermList ::= (CondTermListAnd) CondTermList AND CondFact | (CondTermListNoAnd) CondFact;		
		
/* ---------------------------------------- CondFact ------------------------------------------------------- */		

CondFact ::= (ContFactNoRelop) Expr | (ContFactRelop) Expr Relop Expr;

/* ---------------------------------------- Expr ------------------------------------------------------- */		

Expr ::= (ExprNoMinus) ExprList:el | (ExprMinus) MINUS ExprList:el;

ExprList ::= (ExprListAddop) ExprList:el Addop:ad Term:t | (ExprTermNoAddop) Term:t2;

/* ---------------------------------------- Term ------------------------------------------------------- */		

Term ::= (Terms) TermList:tl;

TermList ::= (TermListMulop) TermList Mulop:m Factor:f | (TermListNoMulop) Factor:f;

/* ---------------------------------------- Factor ------------------------------------------------------- */		

Factor ::= (FactorDesignator) Designator:des
		| (FactorNoActPars) Designator:des LPAREN RPAREN
		| (FactorActPars) Designator:des LPAREN ActPars:ap RPAREN
		| (FactorNum) NUMBER
		| (FactorChar) CHAR
		| (FactorBool) BOOL
		| (FactorNewNoExpr) NEW Type:t
		| (FactorNewExpr) NEW Type LBRACKET Expr:e RBRACKET
		| (FactorExpr) LPAREN Expr:e RPAREN;

/* ---------------------------------------- Designator ------------------------------------------------------- */		
		
Designator ::= (Designators) DesignatorList;

DesignatorList ::= (DesignatorListDot) DesignatorList DOT IDENT 
				| 
				(DesignatorListExpr) DesignatorList LBRACKET Expr RBRACKET 
				| 
				(DesignatorListID) IDENT;
		
		
/* ---------------------------------------- Assignop ------------------------------------------------------- */		
		
Assignop ::= (AssignopEq)	EQUAL;

/* ---------------------------------------- Relop ------------------------------------------------------- */		
		
Relop ::= (RelopEq) EQUALS
		|
		(RelopDif) DIFFERENT
		|
		(RelopMore) MORE
		|
		(RelopMoreEq) MOREEQUAL
		|
		(RelopLess) LESS
		|
		(RelopLessEq) LESSEQUAL;
		
/* ---------------------------------------- Addop ------------------------------------------------------- */		
		
Addop ::= (AddopPlus) PLUS
		| 
		(AddopMinus) MINUS;
		
/* ---------------------------------------- Mulop ------------------------------------------------------- */		
		
Mulop ::= (MulopMul) MULTIPLY
		| 
		(MulopDiv) DIVIDE
		| 
		(MulopMod) MOD;
	
		
		





















		
		
		