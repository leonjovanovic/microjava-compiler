

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	Logger log = Logger.getLogger(getClass());
   
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}


scan with {:
	Symbol s = this.getScanner().next_token(); /*Presrecemo Scanner*/
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, CONST, SEMI, COMMA, EQUAL, CLASS;
terminal ENUM, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, IF, ELSE, FOR, BREAK, CONTINUE;
terminal RETURN, READ, PRINT, INC, DEC, OR, AND, MINUS, NEW, EQUALS, DIFFERENT, MORE;
terminal MOREEQUAL, LESS, LESSEQUAL, PLUS, MULTIPLY, DIVIDE, MOD, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal String BOOL;
terminal Character CHAR;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Decl Decl;
nonterminal MethVarDecl MethVarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal EnumDecl EnumDecl;
nonterminal ConstList ConstList;
nonterminal ConstPart ConstPart;
nonterminal Consts Consts;
nonterminal EnumList EnumList;
nonterminal Enums Enums;
nonterminal VarList VarList;
nonterminal Var Var;
nonterminal ClassPart ClassPart;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal FormParamList FormParamList;
nonterminal Form Form;
nonterminal Type Type;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorPart DesignatorPart; 
nonterminal Expr Expr;
nonterminal Designator Designator;
nonterminal DesignatorList DesignatorList;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;
nonterminal CondTerm CondTerm;
nonterminal CondTermList CondTermList;
nonterminal CondFact CondFact;
nonterminal Addop Addop;
nonterminal ExprList ExprList;
nonterminal Factor Factor;
nonterminal Term Term;
nonterminal ConditionList ConditionList;
nonterminal Condition Condition;
nonterminal TermList TermList;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal Unmatched_For Unmatched_For;
nonterminal Matched_For Matched_For;
nonterminal For For;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program;

/* ---------------------------------------- Program ------------------------------------------------------------- */

Program::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

/* ---------------------------------------- Declarations ------------------------------------------------------------- */

DeclList::=(Declarations) DeclList:D1 Decl:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}	| (NoDeclList) {: RESULT=new NoDeclList(); :} /* epsilon */;

Decl ::= (Declarations1) ConstDecl:C1 {: RESULT=new Declarations1(C1); RESULT.setLine(C1left); :} | (Declarations2) VarDecl:V1 {: RESULT=new Declarations2(V1); RESULT.setLine(V1left); :} | (Declarations3) ClassDecl:C1 {: RESULT=new Declarations3(C1); RESULT.setLine(C1left); :} | (Declarations4) EnumDecl:E1 {: RESULT=new Declarations4(E1); RESULT.setLine(E1left); :} ;


/* ---------------------------------------- Constants ------------------------------------------------------------- */
			
ConstDecl ::= (ConstantsDecl) CONST Type:constType ConstList:C1 SEMI {: RESULT=new ConstantsDecl(constType, C1); RESULT.setLine(constTypeleft); :};

ConstList ::= (ConstantsListComma) ConstList:C1 COMMA ConstPart:C2 {: RESULT=new ConstantsListComma(C1, C2); RESULT.setLine(C1left); :} | (ConstantsListNoComma) ConstPart:C1 {: RESULT=new ConstantsListNoComma(C1); RESULT.setLine(C1left); :};

ConstPart ::= (ConstantsPart) IDENT:constName EQUAL Consts:c {: RESULT=new ConstantsPart(constName, c); RESULT.setLine(constNameleft); :};

Consts ::= (ConstNumber) NUMBER:N1 {: RESULT=new ConstNumber(N1); RESULT.setLine(N1left); :} | (ConstChar) CHAR:C1 {: RESULT=new ConstChar(C1); RESULT.setLine(C1left); :} | (ConstBool) BOOL:B1 {: RESULT=new ConstBool(B1); RESULT.setLine(B1left); :};


/* ---------------------------------------- Enums ------------------------------------------------------------- */

EnumDecl ::= (EnumDeclaration) ENUM IDENT:enumName LBRACE EnumList:E1 RBRACE {: RESULT=new EnumDeclaration(enumName, E1); RESULT.setLine(enumNameleft); :};

EnumList ::= (EnumListComma) EnumList:E1 COMMA Enums:E2 {: RESULT=new EnumListComma(E1, E2); RESULT.setLine(E1left); :} | (EnumNoComma) Enums:E1 {: RESULT=new EnumNoComma(E1); RESULT.setLine(E1left); :};

Enums ::= (EnumNoNum) IDENT:name {: RESULT=new EnumNoNum(name); RESULT.setLine(nameleft); :} | (EnumNum)IDENT:name EQUAL NUMBER:N1 {: RESULT=new EnumNum(name, N1); RESULT.setLine(nameleft); :};


/* ---------------------------------------- Variables ------------------------------------------------------------- */

VarDecl ::= (VarDeclaration) Type:varType VarList:varName SEMI {: RESULT=new VarDeclaration(varType, varName); RESULT.setLine(varTypeleft); :};

VarList ::= (VarListComma) VarList:V1 COMMA Var:v | (VarListNoComma {: RESULT=new VarListComma(V1, Var); RESULT.setLine(V1left); :}) Var:V1 {: RESULT=new VarListNoComma(V1); RESULT.setLine(V1left); :} ;

Var::= (VarNoBrackets) IDENT:varName {: RESULT=new VarNoBrackets(varName); RESULT.setLine(varNameleft); :} | (VarBrackets) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarBrackets(varName); RESULT.setLine(varNameleft); :};


/* ----------------------------------------- Class ------------------------------------------------------------------------ */

ClassDecl ::= (ClassDeclaration) CLASS IDENT:className LBRACE VarDecl:V1 ClassPart:C2 RBRACE {: RESULT=new ClassDeclaration(className, V1, C2); RESULT.setLine(classNameleft); :};

ClassPart ::= (ClassPartMethod) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassPartMethod(M1); RESULT.setLine(M1left); :}
			| {: RESULT=new ClassPartDerived1(); :}
			;


/* ---------------------------------------Class methods ------------------------------------------------------------------- */

MethodDeclList ::=(MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :} | (NoMethodDeclaration) {: RESULT=new NoMethodDeclaration(); :} /* epsilon */;

MethodDecl ::= (MethodDeclarationType) Type:classType IDENT:methodName LPAREN FormPars:F1 RPAREN MethVarDecl:M2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclarationType(classType, methodName, F1, M2, S3); RESULT.setLine(classTypeleft); :}
			|
			(MethodDeclarationVoid) VOID IDENT:methodName LPAREN FormPars:F1 RPAREN MethVarDecl:M2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclarationVoid(methodName, F1, M2, S3); RESULT.setLine(methodNameleft); :}
			;
			
MethVarDecl ::= (MethodVarDecl) MethVarDecl:M1 VarDecl:V2 {: RESULT=new MethodVarDecl(M1, V2); RESULT.setLine(M1left); :} | (NoMethodVarDecl) {: RESULT=new NoMethodVarDecl(); :} /* epsilon */;


/* ---------------Function and method parameters -------------------------------------------------------------------------- */

FormPars ::= (FormParameters) FormParamList:F1 {: RESULT=new FormParameters(F1); RESULT.setLine(F1left); :} | (NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */;

FormParamList ::= (FormParametersList) FormParamList:F1 COMMA Form:F2 {: RESULT=new FormParametersList(F1, F2); RESULT.setLine(F1left); :} | (FormParametersListSingle) Form:F1 {: RESULT=new FormParametersListSingle(F1); RESULT.setLine(F1left); :};

Form ::= (FormNoBrackets) Type:T1 IDENT:formName {: RESULT=new FormNoBrackets(T1, formName); RESULT.setLine(T1left); :} | (FormBrackets) Type:T1 IDENT:formName LBRACKET RBRACKET {: RESULT=new FormBrackets(T1, formName); RESULT.setLine(T1left); :};

/* ---------------------------------------- Type ------------------------------------------------------------- */

Type ::= (Types) IDENT:typeName {: RESULT=new Types(typeName); RESULT.setLine(typeNameleft); :};

/* ---------------------------------------- Statements ------------------------------------------------------------- */

StatementList ::= (StatementLists) StatementList:S1 Statement:S2 {: RESULT=new StatementLists(S1, S2); RESULT.setLine(S1left); :} | (NoStatements) {: RESULT=new NoStatements(); :} /* epsilon */;

Statement ::= (StatementMatched) Matched:M1 {: RESULT=new StatementMatched(M1); RESULT.setLine(M1left); :} | (StatementUnatched)Unmatched:U1 {: RESULT=new StatementUnatched(U1); RESULT.setLine(U1left); :} ;

Unmatched ::= (UnmatchedIfNoElse) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new UnmatchedIfNoElse(C1, S2); RESULT.setLine(C1left); :}
			|
			(UnmatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :}
			|
			(UnmatchedFor) Unmatched_For:U1 {: RESULT=new UnmatchedFor(U1); RESULT.setLine(U1left); :};

Matched ::= (MatchedDesignator) DesignatorStatement:D1 SEMI {: RESULT=new MatchedDesignator(D1); RESULT.setLine(D1left); :}	
		|
		(MatchedDesignatorError) error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new MatchedDesignatorError(); :}	
		| 
		(MatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedIfElse(C1, M2, M3); RESULT.setLine(C1left); :}
		| 
		(MatchedFor) Matched_For:M1 {: RESULT=new MatchedFor(M1); RESULT.setLine(M1left); :}
		| 
		(MatchedBreak) BREAK SEMI {: RESULT=new MatchedBreak(); :}
		| 
		(MatchedContinue) CONTINUE SEMI {: RESULT=new MatchedContinue(); :}
		| 
		(MatchedReturnNoExpr) RETURN SEMI {: RESULT=new MatchedReturnNoExpr(); :}
		| 
		(MatchedReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new MatchedReturnExpr(E1); RESULT.setLine(E1left); :}
		| 
		(MatchedRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new MatchedRead(D1); RESULT.setLine(D1left); :}
		| 
		(MatchedPrint) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new MatchedPrint(E1); RESULT.setLine(E1left); :}
		| 
		(MatchedPrintNumber) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new MatchedPrintNumber(E1, N2); RESULT.setLine(E1left); :}
		|
		(MatchedStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new MatchedStatement(S1); RESULT.setLine(S1left); :}
		;
		
Unmatched_For ::= (UnmatchedForSeparation) For:F1 Unmatched:U2 {: RESULT=new UnmatchedForSeparation(F1, U2); RESULT.setLine(F1left); :} ;
Matched_For   ::= (MatchedForSeparation) For:F1 Matched:M2 {: RESULT=new MatchedForSeparation(F1, M2); RESULT.setLine(F1left); :} ;

For ::= (ForEmpty) FOR LPAREN SEMI SEMI RPAREN {: RESULT=new ForEmpty(); :}
		|
		(For1) FOR LPAREN DesignatorStatement:D1 SEMI SEMI RPAREN {: RESULT=new For1(D1); RESULT.setLine(D1left); :}
		|
		(For2) FOR LPAREN SEMI Condition:C1 SEMI RPAREN {: RESULT=new For2(C1); RESULT.setLine(C1left); :}
		| 
		(For3) FOR LPAREN SEMI SEMI DesignatorStatement:D1 RPAREN {: RESULT=new For3(D1); RESULT.setLine(D1left); :}
		| 
		(For12) FOR LPAREN DesignatorStatement:D1 SEMI Condition:C2 SEMI RPAREN {: RESULT=new For12(D1, C2); RESULT.setLine(D1left); :}
		| 
		(For13) FOR LPAREN DesignatorStatement:D1 SEMI SEMI DesignatorStatement:D2 RPAREN {: RESULT=new For13(D1, D2); RESULT.setLine(D1left); :}
		| 
		(For23) FOR LPAREN SEMI Condition:C1 SEMI DesignatorStatement:D2 RPAREN {: RESULT=new For23(C1, D2); RESULT.setLine(C1left); :}
		| 
		(For123) FOR LPAREN DesignatorStatement:D1 SEMI Condition:C2 SEMI DesignatorStatement:D3 RPAREN {: RESULT=new For123(D1, C2, D3); RESULT.setLine(D1left); :};

/* ---------------------------------------- DesignatorStatement ------------------------------------------------------- */		

DesignatorStatement ::= (DesigStatement) Designator:D1 DesignatorPart:D2 {: RESULT=new DesigStatement(D1, D2); RESULT.setLine(D1left); :};

DesignatorPart ::=(DesignatorPart1) Assignop:A1 Expr:E2 {: RESULT=new DesignatorPart1(A1, E2); RESULT.setLine(A1left); :} 
				| 
				(DesignatorPart2) LPAREN RPAREN {: RESULT=new DesignatorPart2(); :} 
				| 
				(DesignatorPart3) INC {: RESULT=new DesignatorPart3(); :} 
				| 
				(DesignatorPart4) DEC {: RESULT=new DesignatorPart4(); :}
				|
				(DesignatorPart5) LPAREN ActPars:A1 RPAREN {: RESULT=new DesignatorPart5(A1); RESULT.setLine(A1left); :}
				;
				
		
/* ---------------------------------------- ActualParameters ------------------------------------------------------- */

ActPars ::= (ActualParameters) ActParsList:A1 {: RESULT=new ActualParameters(A1); RESULT.setLine(A1left); :};

ActParsList ::= (ActParsListComma) ActParsList:A1 COMMA Expr:E2 {: RESULT=new ActParsListComma(A1, E2); RESULT.setLine(A1left); :} | (ActParsListNoComma) Expr:E1 {: RESULT=new ActParsListNoComma(E1); RESULT.setLine(E1left); :};

/* ---------------------------------------- Condition ------------------------------------------------------- */

Condition ::= (Conditions) ConditionList:C1 {: RESULT=new Conditions(C1); RESULT.setLine(C1left); :} ;

ConditionList ::= (ConditionListOr) ConditionList:C1 OR CondTerm:C2 {: RESULT=new ConditionListOr(C1, C2); RESULT.setLine(C1left); :} | (ConditionListNoOr) CondTerm:C1 {: RESULT=new ConditionListNoOr(C1); RESULT.setLine(C1left); :};

/* ---------------------------------------- CondTerm ------------------------------------------------------- */

CondTerm ::= (ConditionTerm) CondTermList:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :};

CondTermList ::= (CondTermListAnd) CondTermList:C1 AND CondFact:C2 {: RESULT=new CondTermListAnd(C1, C2); RESULT.setLine(C1left); :} | (CondTermListNoAnd) CondFact:C1 {: RESULT=new CondTermListNoAnd(C1); RESULT.setLine(C1left); :};		
		
/* ---------------------------------------- CondFact ------------------------------------------------------- */		

CondFact ::= (ContFactNoRelop) Expr:E1 {: RESULT=new ContFactNoRelop(E1); RESULT.setLine(E1left); :} | (ContFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ContFactRelop(E1, R2, E3); RESULT.setLine(E1left); :};

/* ---------------------------------------- Expr ------------------------------------------------------- */		

Expr ::= (ExprNoMinus) ExprList:el {: RESULT=new ExprNoMinus(el); RESULT.setLine(elleft); :} | (ExprMinus) MINUS ExprList:el {: RESULT=new ExprMinus(el); RESULT.setLine(elleft); :};

ExprList ::= (ExprListAddop) ExprList:el Addop:ad Term:t {: RESULT=new ExprListAddop(el, ad, t); RESULT.setLine(elleft); :} | (ExprTermNoAddop) Term:t2 {: RESULT=new ExprTermNoAddop(t2); RESULT.setLine(t2left); :};

/* ---------------------------------------- Term ------------------------------------------------------- */		

Term ::= (Terms) TermList:tl {: RESULT=new Terms(tl); RESULT.setLine(tlleft); :};

TermList ::= (TermListMulop) TermList:T1 Mulop:m Factor:f {: RESULT=new TermListMulop(T1, m, f); RESULT.setLine(T1left); :} | (TermListNoMulop) Factor:f {: RESULT=new TermListNoMulop(f); RESULT.setLine(fleft); :};

/* ---------------------------------------- Factor ------------------------------------------------------- */		

Factor ::= (FactorDesignator) Designator:des {: RESULT=new FactorDesignator(des); RESULT.setLine(desleft); :}
		| (FactorNoActPars) Designator:des LPAREN RPAREN {: RESULT=new FactorNoActPars(des); RESULT.setLine(desleft); :}
		| (FactorActPars) Designator:des LPAREN ActPars:ap RPAREN {: RESULT=new FactorActPars(des, ap); RESULT.setLine(desleft); :}
		| (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
		| (FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		| (FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		| (FactorNewNoExpr) NEW Type:t {: RESULT=new FactorNewNoExpr(t); RESULT.setLine(tleft); :}
		| (FactorNewExpr) NEW Type:T1 LBRACKET Expr:e RBRACKET {: RESULT=new FactorNewExpr(T1, e); RESULT.setLine(T1left); :}
		| (FactorExpr) LPAREN Expr:e RPAREN {: RESULT=new FactorExpr(e); RESULT.setLine(eleft); :};

/* ---------------------------------------- Designator ------------------------------------------------------- */		
		
Designator ::= (Designators) DesignatorList:D1 {: RESULT=new Designators(D1); RESULT.setLine(D1left); :};

DesignatorList ::= (DesignatorListDot) DesignatorList:D1 DOT IDENT:I2 {: RESULT=new DesignatorListDot(D1, I2); RESULT.setLine(D1left); :} 
				| 
				(DesignatorListExpr) DesignatorList:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorListExpr(D1, E2); RESULT.setLine(D1left); :} 
				| 
				(DesignatorListID) IDENT:I1 {: RESULT=new DesignatorListID(I1); RESULT.setLine(I1left); :};
		
		
/* ---------------------------------------- Assignop ------------------------------------------------------- */		
		
Assignop ::= (AssignopEq)	EQUAL {: RESULT=new AssignopEq(); :};

/* ---------------------------------------- Relop ------------------------------------------------------- */		
		
Relop ::= (RelopEq) EQUALS {: RESULT=new RelopEq(); :}
		|
		(RelopDif) DIFFERENT {: RESULT=new RelopDif(); :}
		|
		(RelopMore) MORE {: RESULT=new RelopMore(); :}
		|
		(RelopMoreEq) MOREEQUAL {: RESULT=new RelopMoreEq(); :}
		|
		(RelopLess) LESS {: RESULT=new RelopLess(); :}
		|
		(RelopLessEq) LESSEQUAL {: RESULT=new RelopLessEq(); :};
		
/* ---------------------------------------- Addop ------------------------------------------------------- */		
		
Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		| 
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :};
		
/* ---------------------------------------- Mulop ------------------------------------------------------- */		
		
Mulop ::= (MulopMul) MULTIPLY {: RESULT=new MulopMul(); :}
		| 
		(MulopDiv) DIVIDE {: RESULT=new MulopDiv(); :}
		| 
		(MulopMod) MOD {: RESULT=new MulopMod(); :};
	
		
		





















		
		
		