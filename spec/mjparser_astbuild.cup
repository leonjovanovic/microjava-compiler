

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token(); /*Presrecemo Scanner*/
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, CONST, SEMI, COMMA, EQUAL, CLASS;
terminal ENUM, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, IF, ELSE, FOR, BREAK, CONTINUE;
terminal RETURN, READ, PRINT, INC, DEC, OR, AND, MINUS, NEW, EQUALS, DIFFERENT, MORE;
terminal MOREEQUAL, LESS, LESSEQUAL, PLUS, MULTIPLY, DIVIDE, MOD, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal Decl Decl;
nonterminal ConstDecl ConstDecl;
nonterminal GlobVarDecl GlobVarDecl;
nonterminal LoclVarDecl LoclVarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal EnumDecl EnumDecl;
nonterminal EnumList EnumList;
nonterminal GlobVarList GlobVarList;
nonterminal GlobVar GlobVar;
nonterminal LoclVarList LoclVarList;
nonterminal LoclVar LoclVar;
nonterminal ClassPart ClassPart;
nonterminal FormPars FormPars;
nonterminal FormParamList FormParamList;
nonterminal Form Form;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal DesignatorStatementOpt DesignatorStatementOpt; 
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;
nonterminal Addop Addop;
nonterminal ConditionEnd ConditionEnd;
nonterminal StartElse StartElse;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal For For;
nonterminal ForStart ForStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodNameType, MethVarDecl, Designator, DesignatorStatement, EnumStart, Enums;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, ExprOpt, ExprList, Factor, Term, ConstList, ConstPart, Consts, CondFact, CondTerm, Condition;

/* ---------------------------------------- Program ------------------------------------------------------------- */

Program::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

/* ---------------------------------------- Declarations ------------------------------------------------------------- */

DeclList::=(Declarations) DeclList:D1 Decl:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}	| (NoDeclList) {: RESULT=new NoDeclList(); :} /* epsilon */;

Decl ::= (Declarations1) ConstDecl:C1 {: RESULT=new Declarations1(C1); RESULT.setLine(C1left); :} | (Declarations2) GlobVarDecl:G1 {: RESULT=new Declarations2(G1); RESULT.setLine(G1left); :} | (Declarations3) ClassDecl:C1 {: RESULT=new Declarations3(C1); RESULT.setLine(C1left); :} | (Declarations4) EnumDecl:E1 {: RESULT=new Declarations4(E1); RESULT.setLine(E1left); :} ;


/* ---------------------------------------- Constants ------------------------------------------------------------- */
			
ConstDecl ::= (ConstantsDecl) CONST Type:constType ConstList:C1 SEMI {: RESULT=new ConstantsDecl(constType, C1); RESULT.setLine(constTypeleft); :};

ConstList ::= (ConstantsListComma) ConstList:C1 COMMA ConstPart:C2 {: RESULT=new ConstantsListComma(C1, C2); RESULT.setLine(C1left); :} | (ConstantsListNoComma) ConstPart:C1 {: RESULT=new ConstantsListNoComma(C1); RESULT.setLine(C1left); :};

ConstPart ::= (ConstantsPart) IDENT:constName EQUAL Consts:c {: RESULT=new ConstantsPart(constName, c); RESULT.setLine(constNameleft); :};

Consts ::= (ConstNumber) NUMBER:value {: RESULT=new ConstNumber(value); RESULT.setLine(valueleft); :} | (ConstChar) CHAR:value {: RESULT=new ConstChar(value); RESULT.setLine(valueleft); :} | (ConstBool) BOOL:value {: RESULT=new ConstBool(value); RESULT.setLine(valueleft); :}
		|
		(ConstError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ConstError(); :};
	

/* ---------------------------------------- Enums ------------------------------------------------------------- */

EnumDecl ::= (EnumDeclaration) ENUM EnumStart:E1 LBRACE EnumList:E2 RBRACE {: RESULT=new EnumDeclaration(E1, E2); RESULT.setLine(E1left); :};

EnumStart ::= (StartEnum) IDENT:enumName {: RESULT=new StartEnum(enumName); RESULT.setLine(enumNameleft); :};

EnumList ::= (EnumListComma) EnumList:E1 COMMA Enums:E2 {: RESULT=new EnumListComma(E1, E2); RESULT.setLine(E1left); :} | (EnumNoComma) Enums:E1 {: RESULT=new EnumNoComma(E1); RESULT.setLine(E1left); :};

Enums ::= (EnumNoNum) IDENT:name {: RESULT=new EnumNoNum(name); RESULT.setLine(nameleft); :} | (EnumNum)IDENT:name EQUAL NUMBER:value {: RESULT=new EnumNum(name, value); RESULT.setLine(nameleft); :};


/* ----------------------------------------Global Variables ------------------------------------------------------------- */

GlobVarDecl ::= (GlobVarDeclaration) Type:varType GlobVarList:G1 SEMI {: RESULT=new GlobVarDeclaration(varType, G1); RESULT.setLine(varTypeleft); :}
			|
			(GlobVarDeclarationError) error SEMI:l{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new GlobVarDeclarationError(); :};

GlobVarList ::= (GlobVarListComma) GlobVarList:G1 COMMA GlobVar:G2 {: RESULT=new GlobVarListComma(G1, G2); RESULT.setLine(G1left); :} | (GlobVarListNoComma) GlobVar:G1 {: RESULT=new GlobVarListNoComma(G1); RESULT.setLine(G1left); :};
		
GlobVar::= (GlobVarNoBrackets) IDENT:varName {: RESULT=new GlobVarNoBrackets(varName); RESULT.setLine(varNameleft); :} | (GlobVarBrackets) IDENT:varName LBRACKET RBRACKET {: RESULT=new GlobVarBrackets(varName); RESULT.setLine(varNameleft); :}
		|
		(GlobVarError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new GlobVarError(); :};
	


/* ----------------------------------------Local Variables ------------------------------------------------------------- */

LoclVarDecl ::= (LoclVarDeclaration) Type:varType LoclVarList:varName SEMI {: RESULT=new LoclVarDeclaration(varType, varName); RESULT.setLine(varTypeleft); :}
			|
			(LoclVarDeclarationError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new LoclVarDeclarationError(); :};
	

LoclVarList ::= (LoclVarListComma) LoclVarList:L1 COMMA LoclVar:L2 {: RESULT=new LoclVarListComma(L1, L2); RESULT.setLine(L1left); :} | (LoclVarListNoComma) LoclVar:L1 {: RESULT=new LoclVarListNoComma(L1); RESULT.setLine(L1left); :};
		
LoclVar::= (LoclVarNoBrackets) IDENT:varName {: RESULT=new LoclVarNoBrackets(varName); RESULT.setLine(varNameleft); :} | (LoclVarBrackets) IDENT:varName LBRACKET RBRACKET {: RESULT=new LoclVarBrackets(varName); RESULT.setLine(varNameleft); :} 
		|
		(LoclVarError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new LoclVarError(); :};
	


/* ----------------------------------------- Class ------------------------------------------------------------------------ */

ClassDecl ::= (ClassDeclaration) CLASS IDENT:className LBRACE LoclVarDecl:L1 ClassPart:C2 RBRACE {: RESULT=new ClassDeclaration(className, L1, C2); RESULT.setLine(classNameleft); :};

ClassPart ::= (ClassPartMethod) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassPartMethod(M1); RESULT.setLine(M1left); :}
			|
			(NoClassPartMethod) {: RESULT=new NoClassPartMethod(); :} /* epsilon */
			;


/* --------------------------------------- Methods ------------------------------------------------------------------- */

MethodDeclList ::=(MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :} | (NoMethod) {: RESULT=new NoMethod(); :} /* epsilon */;

MethodDecl ::= (MethodDeclarationType) MethodNameType:M1 LPAREN FormPars:F2 RPAREN MethVarDecl:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclarationType(M1, F2, M3, S4); RESULT.setLine(M1left); :} ;
			 
MethodNameType ::= (MethNameType) Type:retType IDENT:methodName {: RESULT=new MethNameType(retType, methodName); RESULT.setLine(retTypeleft); :}
				|
				(MethNameVoid) VOID IDENT:methodName {: RESULT=new MethNameVoid(methodName); RESULT.setLine(methodNameleft); :};
			
MethVarDecl ::= (MethodVarDecl) MethVarDecl:M1 LoclVarDecl:L2 {: RESULT=new MethodVarDecl(M1, L2); RESULT.setLine(M1left); :} | (NoMethodVarDecl) {: RESULT=new NoMethodVarDecl(); :} /* epsilon */;


/* ----------------------------Function and method parameters ------------------------------------------------------------- */

FormPars ::= (FormParameters) FormParamList:F1 {: RESULT=new FormParameters(F1); RESULT.setLine(F1left); :} | (NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */;

FormParamList ::= (FormParametersList) FormParamList:F1 COMMA Form:F2 {: RESULT=new FormParametersList(F1, F2); RESULT.setLine(F1left); :} | (FormParametersListSingle) Form:F1 {: RESULT=new FormParametersListSingle(F1); RESULT.setLine(F1left); :};

Form ::= (FormNoBrackets) Type:T1 IDENT:formName {: RESULT=new FormNoBrackets(T1, formName); RESULT.setLine(T1left); :} 
		| 
		(FormBrackets) Type:T1 IDENT:formName LBRACKET RBRACKET {: RESULT=new FormBrackets(T1, formName); RESULT.setLine(T1left); :}
		|
		(FormParsError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new FormParsError(); :};

/* ---------------------------------------- Type ------------------------------------------------------------- */

Type ::= (Types) IDENT:typeName {: RESULT=new Types(typeName); RESULT.setLine(typeNameleft); :};

/* ---------------------------------------- Statements ------------------------------------------------------------- */

StatementList ::= (StatementLists) StatementList:S1 Statement:S2 {: RESULT=new StatementLists(S1, S2); RESULT.setLine(S1left); :} | (NoStatements) {: RESULT=new NoStatements(); :} /* epsilon */;

Statement ::= (StatementMatched) Matched:M1 {: RESULT=new StatementMatched(M1); RESULT.setLine(M1left); :} | (StatementUnatched)Unmatched:U1 {: RESULT=new StatementUnatched(U1); RESULT.setLine(U1left); :} ;

Unmatched ::= (UnmatchedIfNoElse) IF LPAREN Condition:C1 ConditionEnd:C2 Statement:S3 {: RESULT=new UnmatchedIfNoElse(C1, C2, S3); RESULT.setLine(C1left); :}
			|
			(UnmatchedIfElse) IF LPAREN Condition:C1 ConditionEnd:C2 Matched:M3 StartElse:S4 Unmatched:U5 {: RESULT=new UnmatchedIfElse(C1, C2, M3, S4, U5); RESULT.setLine(C1left); :}
			|
			(UnmatchedFor) For:F1 Unmatched:U2 {: RESULT=new UnmatchedFor(F1, U2); RESULT.setLine(F1left); :};

Matched ::= (MatchedDesignator) DesignatorStatement:D1 SEMI {: RESULT=new MatchedDesignator(D1); RESULT.setLine(D1left); :}	
		|
		(MatchedDesignatorError) error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new MatchedDesignatorError(); :}	
		| 
		(MatchedIfElse) IF LPAREN Condition:value ConditionEnd:C1 Matched:th StartElse:S2 Matched:el {: RESULT=new MatchedIfElse(value, C1, th, S2, el); RESULT.setLine(valueleft); :}
		| 
		(MatchedFor) For:F1 Matched:M2 {: RESULT=new MatchedFor(F1, M2); RESULT.setLine(F1left); :}
		| 
		(MatchedBreak) BREAK SEMI {: RESULT=new MatchedBreak(); :}
		| 
		(MatchedContinue) CONTINUE SEMI {: RESULT=new MatchedContinue(); :}
		| 
		(MatchedReturnExpr) RETURN ExprOpt:t SEMI {: RESULT=new MatchedReturnExpr(t); RESULT.setLine(tleft); :}
		| 
		(MatchedRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new MatchedRead(D1); RESULT.setLine(D1left); :}
		| 
		(MatchedPrint) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new MatchedPrint(E1); RESULT.setLine(E1left); :}
		| 
		(MatchedPrintNumber) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new MatchedPrintNumber(E1, N2); RESULT.setLine(E1left); :}
		|
		(MatchedStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new MatchedStatement(S1); RESULT.setLine(S1left); :}
		;
ConditionEnd ::= (CondEnd) RPAREN {: RESULT=new CondEnd(); :};
StartElse ::= (ElseStart) ELSE {: RESULT=new ElseStart(); :};

For ::= (For123) FOR ForStart:F1 DesignatorStatementOpt:D2 SEMI Condition:C3 SEMI DesignatorStatementOpt:D4 RPAREN Statement:S5 {: RESULT=new For123(F1, D2, C3, D4, S5); RESULT.setLine(F1left); :};
ForStart ::= (StartFor) LPAREN {: RESULT=new StartFor(); :};

/* ---------------------------------------- DesignatorStatement ------------------------------------------------------- */		

DesignatorStatementOpt ::= (DesigStatementY) DesignatorStatement:D1 {: RESULT=new DesigStatementY(D1); RESULT.setLine(D1left); :} 
						|
						(NoDesigStatement) {: RESULT=new NoDesigStatement(); :} /* epsilon */
						; 

DesignatorStatement ::=(DesignatorAssign) Designator:dest Assignop:A1 Expr:e {: RESULT=new DesignatorAssign(dest, A1, e); RESULT.setLine(destleft); :} 
					|
					(DesignatorParams) Designator:dest LPAREN ActPars:A1 RPAREN {: RESULT=new DesignatorParams(dest, A1); RESULT.setLine(destleft); :}
					| 
					(DesignatorInc) Designator:dest INC {: RESULT=new DesignatorInc(dest); RESULT.setLine(destleft); :} 
					| 
					(DesignatorDec) Designator:dest DEC {: RESULT=new DesignatorDec(dest); RESULT.setLine(destleft); :}
					|
					(DesignatorError) Designator:D1 Assignop:A2 error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new DesignatorError(D1, A2); RESULT.setLine(D1left); :}
					;
				
		
/* ---------------------------------------- ActualParameters ------------------------------------------------------- */

ActPars ::= (ActualParameters) ActParsList:A1 {: RESULT=new ActualParameters(A1); RESULT.setLine(A1left); :} | (NoActPars) {: RESULT=new NoActPars(); :} /* epsilon */;

ActParsList ::= (ActParsListComma) ActParsList:A1 COMMA Expr:E2 {: RESULT=new ActParsListComma(A1, E2); RESULT.setLine(A1left); :} | (ActParsListNoComma) Expr:E1 {: RESULT=new ActParsListNoComma(E1); RESULT.setLine(E1left); :};

/* ---------------------------------------- Condition ------------------------------------------------------- */

Condition ::= (ConditionListOr) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionListOr(C1, C2); RESULT.setLine(C1left); :} 
			| 
			(ConditionListNoOr) CondTerm:value {: RESULT=new ConditionListNoOr(value); RESULT.setLine(valueleft); :}
			|
			(ConditionError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new ConditionError(); :}	
			|
			(NoConditions) {: RESULT=new NoConditions(); :} /* epsilon */
			;

/* ---------------------------------------- CondTerm ------------------------------------------------------- */

CondTerm ::= (CondTermListAnd) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermListAnd(C1, C2); RESULT.setLine(C1left); :} | (CondTermListNoAnd) CondFact:C1 {: RESULT=new CondTermListNoAnd(C1); RESULT.setLine(C1left); :};		
		
/* ---------------------------------------- CondFact ------------------------------------------------------- */		

CondFact ::= (CondFactNoRelop) Expr:E1 {: RESULT=new CondFactNoRelop(E1); RESULT.setLine(E1left); :} | (CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :};

/* ---------------------------------------- Expr ------------------------------------------------------- */		

ExprOpt ::= (Exprs) Expr:te {: RESULT=new Exprs(te); RESULT.setLine(teleft); :} | (NoExpr) {: RESULT=new NoExpr(); :} /* epsilon */;

Expr ::= (ExprNoMinus) ExprList:te {: RESULT=new ExprNoMinus(te); RESULT.setLine(teleft); :} | (ExprMinus) MINUS ExprList:te {: RESULT=new ExprMinus(te); RESULT.setLine(teleft); :};

ExprList ::= (ExprListAddop) ExprList:te Addop:ad Term:t {: RESULT=new ExprListAddop(te, ad, t); RESULT.setLine(teleft); :} | (ExprTermNoAddop) Term:t {: RESULT=new ExprTermNoAddop(t); RESULT.setLine(tleft); :};

/* ---------------------------------------- Term ------------------------------------------------------- */		

Term ::= (Terms) Term:t Mulop:m Factor:f {: RESULT=new Terms(t, m, f); RESULT.setLine(tleft); :} | (TermNoMulop) Factor:t {: RESULT=new TermNoMulop(t); RESULT.setLine(tleft); :};

/* ---------------------------------------- Factor ------------------------------------------------------- */		

Factor ::= (FactorDesignator) Designator:d {: RESULT=new FactorDesignator(d); RESULT.setLine(dleft); :}
		| (FactorDesignatorActPars) Designator:func LPAREN ActPars:A1 RPAREN {: RESULT=new FactorDesignatorActPars(func, A1); RESULT.setLine(funcleft); :}
		| (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
		| (FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		| (FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		| (FactorNewNoExpr) NEW Type:t {: RESULT=new FactorNewNoExpr(t); RESULT.setLine(tleft); :}
		| (FactorNewExpr) NEW Type:T1 LBRACKET Expr:e RBRACKET {: RESULT=new FactorNewExpr(T1, e); RESULT.setLine(T1left); :}
		| (FactorExpr) LPAREN Expr:e RPAREN {: RESULT=new FactorExpr(e); RESULT.setLine(eleft); :};

/* ---------------------------------------- Designator ------------------------------------------------------- */		

Designator ::= (DesignatorDot) Designator:d DOT IDENT:ident {: RESULT=new DesignatorDot(d, ident); RESULT.setLine(dleft); :} 
			| 
			(DesignatorExpr) Designator:d LBRACKET Expr:pos RBRACKET {: RESULT=new DesignatorExpr(d, pos); RESULT.setLine(dleft); :} 
			| 
			(DesignatorID) IDENT:name {: RESULT=new DesignatorID(name); RESULT.setLine(nameleft); :};
		
		
/* ---------------------------------------- Assignop ------------------------------------------------------- */		
		
Assignop ::= (AssignopEq) EQUAL {: RESULT=new AssignopEq(); :};

/* ---------------------------------------- Relop ------------------------------------------------------- */		
		
Relop ::= (RelopEq) EQUALS {: RESULT=new RelopEq(); :}
		|
		(RelopDif) DIFFERENT {: RESULT=new RelopDif(); :}
		|
		(RelopMore) MORE {: RESULT=new RelopMore(); :}
		|
		(RelopMoreEq) MOREEQUAL {: RESULT=new RelopMoreEq(); :}
		|
		(RelopLess) LESS {: RESULT=new RelopLess(); :}
		|
		(RelopLessEq) LESSEQUAL {: RESULT=new RelopLessEq(); :};
		
/* ---------------------------------------- Addop ------------------------------------------------------- */		
		
Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		| 
		(AddopMinus) MINUS {: RESULT=new AddopMinus(); :};
		
/* ---------------------------------------- Mulop ------------------------------------------------------- */		
		
Mulop ::= (MulopMul) MULTIPLY {: RESULT=new MulopMul(); :}
		| 
		(MulopDiv) DIVIDE {: RESULT=new MulopDiv(); :}
		| 
		(MulopMod) MOD {: RESULT=new MulopMod(); :};
	
		
		





















		
		
		