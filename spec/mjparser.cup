

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
        
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token(); /*Presrecemo Scanner*/
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, CONST, SEMI, COMMA, EQUAL, CLASS;
terminal ENUM, LBRACKET, RBRACKET, VOID, LPAREN, RPAREN, IF, ELSE, FOR, BREAK, CONTINUE;
terminal RETURN, READ, PRINT, INC, DEC, OR, AND, MINUS, NEW, EQUALS, DIFFERENT, MORE;
terminal MOREEQUAL, LESS, LESSEQUAL, PLUS, MULTIPLY, DIVIDE, MOD, DOT;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

nonterminal DeclList, MethodDeclList, Decl;
nonterminal ConstDecl, GlobVarDecl, LoclVarDecl, ClassDecl, EnumDecl;
nonterminal EnumList;
nonterminal GlobVarList, GlobVar, LoclVarList, LoclVar, ClassPart, FormPars, FormParamList;
nonterminal Form, Statement, StatementList, DesignatorStatementOpt; 
nonterminal Assignop, ActPars;
nonterminal ActParsList, Addop, ConditionEnd, StartElse;
nonterminal Relop, Mulop, Matched, Unmatched, For, ForStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodNameType, MethVarDecl, Designator, DesignatorStatement, EnumStart, Enums;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, ExprOpt, ExprList, Factor, Term, ConstList, ConstPart, Consts, CondFact, CondTerm, Condition;

/* ---------------------------------------- Program ------------------------------------------------------------- */

Program::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

/* ---------------------------------------- Declarations ------------------------------------------------------------- */

DeclList::=(Declarations) DeclList Decl	| (NoDeclList) /* epsilon */;

Decl ::= (Declarations1) ConstDecl | (Declarations2) GlobVarDecl | (Declarations3) ClassDecl | (Declarations4) EnumDecl ;


/* ---------------------------------------- Constants ------------------------------------------------------------- */
			
ConstDecl ::= (ConstantsDecl) CONST Type:constType ConstList SEMI;

ConstList ::= (ConstantsListComma) ConstList COMMA ConstPart | (ConstantsListNoComma) ConstPart;

ConstPart ::= (ConstantsPart) IDENT:constName EQUAL Consts:c;

Consts ::= (ConstNumber) NUMBER:value | (ConstChar) CHAR:value | (ConstBool) BOOL:value
		|
		(ConstError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};
	

/* ---------------------------------------- Enums ------------------------------------------------------------- */

EnumDecl ::= (EnumDeclaration) ENUM EnumStart LBRACE EnumList RBRACE;

EnumStart ::= (StartEnum) IDENT:enumName;

EnumList ::= (EnumListComma) EnumList COMMA Enums | (EnumNoComma) Enums;

Enums ::= (EnumNoNum) IDENT:name | (EnumNum)IDENT:name EQUAL NUMBER:value;


/* ----------------------------------------Global Variables ------------------------------------------------------------- */

GlobVarDecl ::= (GlobVarDeclaration) Type:varType GlobVarList SEMI;

GlobVarList ::= (GlobVarListComma) GlobVarList COMMA GlobVar | (GlobVarListNoComma) GlobVar;
		
GlobVar::= (GlobVarNoBrackets) IDENT:varName | (GlobVarBrackets) IDENT:varName LBRACKET RBRACKET
		|
		(GlobVarDeclarationError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};
	


/* ----------------------------------------Local Variables ------------------------------------------------------------- */

LoclVarDecl ::= (LoclVarDeclaration) Type:varType LoclVarList:varName SEMI;

LoclVarList ::= (LoclVarListComma) LoclVarList COMMA LoclVar | (LoclVarListNoComma) LoclVar;
		
LoclVar::= (LoclVarNoBrackets) IDENT:varName | (LoclVarBrackets) IDENT:varName LBRACKET RBRACKET 
		|
		(LoclVarDeclarationError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};
	


/* ----------------------------------------- Class ------------------------------------------------------------------------ */

ClassDecl ::= (ClassDeclaration) CLASS IDENT:className LBRACE LoclVarDecl ClassPart RBRACE;

ClassPart ::= (ClassPartMethod) LBRACE MethodDeclList RBRACE
			|
			(NoClassPartMethod) /* epsilon */
			;


/* --------------------------------------- Methods ------------------------------------------------------------------- */

MethodDeclList ::=(MethodDeclarationList) MethodDeclList MethodDecl | (NoMethod) /* epsilon */;

MethodDecl ::= (MethodDeclarationType) MethodNameType LPAREN FormPars RPAREN MethVarDecl LBRACE StatementList RBRACE ;
			
MethodNameType ::= (MethNameType) Type:retType IDENT:methodName
				|
				(MethNameVoid) VOID IDENT:methodName;
			
MethVarDecl ::= (MethodVarDecl) MethVarDecl LoclVarDecl | (NoMethodVarDecl) /* epsilon */;


/* ----------------------------Function and method parameters ------------------------------------------------------------- */

FormPars ::= (FormParameters) FormParamList | (NoFormParsList) /* epsilon */;

FormParamList ::= (FormParametersList) FormParamList COMMA Form | (FormParametersListSingle) Form;

Form ::= (FormNoBrackets) Type IDENT:formName 
		| 
		(FormBrackets) Type IDENT:formName LBRACKET RBRACKET
		|
		(FormParsError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :};

/* ---------------------------------------- Type ------------------------------------------------------------- */

Type ::= (Types) IDENT:typeName;

/* ---------------------------------------- Statements ------------------------------------------------------------- */

StatementList ::= (StatementLists) StatementList Statement | (NoStatements) /* epsilon */;

Statement ::= (StatementMatched) Matched | (StatementUnatched)Unmatched ;

Unmatched ::= (UnmatchedIfNoElse) IF LPAREN Condition ConditionEnd Statement
			|
			(UnmatchedIfElse) IF LPAREN Condition ConditionEnd Matched StartElse Unmatched
			|
			(UnmatchedFor) For Unmatched;

Matched ::= (MatchedDesignator) DesignatorStatement SEMI	
		|
		(MatchedDesignatorError) error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}	
		| 
		(MatchedIfElse) IF LPAREN Condition:value ConditionEnd Matched:th StartElse Matched:el
		| 
		(MatchedFor) For Matched
		| 
		(MatchedBreak) BREAK SEMI
		| 
		(MatchedContinue) CONTINUE SEMI
		| 
		(MatchedReturnExpr) RETURN ExprOpt:t SEMI
		| 
		(MatchedRead) READ LPAREN Designator RPAREN SEMI
		| 
		(MatchedPrint) PRINT LPAREN Expr RPAREN SEMI
		| 
		(MatchedPrintNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		|
		(MatchedStatement) LBRACE StatementList RBRACE
		;
ConditionEnd ::= (CondEnd) RPAREN;
StartElse ::= (ElseStart) ELSE;

For ::= (For123) FOR ForStart DesignatorStatementOpt SEMI Condition SEMI DesignatorStatementOpt RPAREN Statement;
ForStart ::= (StartFor) LPAREN;

/* ---------------------------------------- DesignatorStatement ------------------------------------------------------- */		

DesignatorStatementOpt ::= (DesigStatementY) DesignatorStatement 
						|
						(NoDesigStatement) /* epsilon */
						; 

DesignatorStatement ::=(DesignatorAssign) Designator:dest Assignop Expr:e 
					|
					(DesignatorParams) Designator:dest LPAREN ActPars RPAREN
					| 
					(DesignatorInc) Designator:dest INC 
					| 
					(DesignatorDec) Designator:dest DEC
					|
					(DesignatorError) Designator Assignop error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
					;
				
		
/* ---------------------------------------- ActualParameters ------------------------------------------------------- */

ActPars ::= (ActualParameters) ActParsList | (NoActPars) /* epsilon */;

ActParsList ::= (ActParsListComma) ActParsList COMMA Expr | (ActParsListNoComma) Expr;

/* ---------------------------------------- Condition ------------------------------------------------------- */

Condition ::= (ConditionListOr) Condition OR CondTerm 
			| 
			(ConditionListNoOr) CondTerm:value
			|
			(ConditionError) error:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}	
			|
			(NoConditions) /* epsilon */
			;

/* ---------------------------------------- CondTerm ------------------------------------------------------- */

CondTerm ::= (CondTermListAnd) CondTerm AND CondFact | (CondTermListNoAnd) CondFact;		
		
/* ---------------------------------------- CondFact ------------------------------------------------------- */		

CondFact ::= (CondFactNoRelop) Expr | (CondFactRelop) Expr Relop Expr;

/* ---------------------------------------- Expr ------------------------------------------------------- */		

ExprOpt ::= (Exprs) Expr:te | (NoExpr) /* epsilon */;

Expr ::= (ExprNoMinus) ExprList:te | (ExprMinus) MINUS ExprList:te;

ExprList ::= (ExprListAddop) ExprList:te Addop:ad Term:t | (ExprTermNoAddop) Term:t;

/* ---------------------------------------- Term ------------------------------------------------------- */		

Term ::= (Terms) Term:t Mulop:m Factor:f | (TermNoMulop) Factor:t;

/* ---------------------------------------- Factor ------------------------------------------------------- */		

Factor ::= (FactorDesignator) Designator:d
		| (FactorDesignatorActPars) Designator:func LPAREN ActPars RPAREN
		| (FactorNum) NUMBER
		| (FactorChar) CHAR
		| (FactorBool) BOOL
		| (FactorNewNoExpr) NEW Type:t
		| (FactorNewExpr) NEW Type LBRACKET Expr:e RBRACKET
		| (FactorExpr) LPAREN Expr:e RPAREN;

/* ---------------------------------------- Designator ------------------------------------------------------- */		

Designator ::= (DesignatorDot) Designator:d DOT IDENT:ident 
			| 
			(DesignatorExpr) Designator:d LBRACKET Expr:pos RBRACKET 
			| 
			(DesignatorID) IDENT:name;
		
		
/* ---------------------------------------- Assignop ------------------------------------------------------- */		
		
Assignop ::= (AssignopEq) EQUAL;

/* ---------------------------------------- Relop ------------------------------------------------------- */		
		
Relop ::= (RelopEq) EQUALS
		|
		(RelopDif) DIFFERENT
		|
		(RelopMore) MORE
		|
		(RelopMoreEq) MOREEQUAL
		|
		(RelopLess) LESS
		|
		(RelopLessEq) LESSEQUAL;
		
/* ---------------------------------------- Addop ------------------------------------------------------- */		
		
Addop ::= (AddopPlus) PLUS
		| 
		(AddopMinus) MINUS;
		
/* ---------------------------------------- Mulop ------------------------------------------------------- */		
		
Mulop ::= (MulopMul) MULTIPLY
		| 
		(MulopDiv) DIVIDE
		| 
		(MulopMod) MOD;
	
		
		





















		
		
		